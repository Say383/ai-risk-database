import { ChangeEvent, KeyboardEventHandler, useMemo, useState } from "react";
import { PageLayout } from "@/layouts/PageLayout";
import { Box } from "@mui/system";
import { SubmitHandler, useForm, FormProvider } from "react-hook-form";
import { useSession, signIn } from "next-auth/react";
import { z, SafeParseError } from "zod";
import Alert from "@mui/material/Alert";
import classNames from "classnames";
import Image from "next/image";
import { GetServerSidePropsContext } from "next";
import { useRouter } from "next/router";
import Autocomplete from "@mui/material/Autocomplete";
import { InputAdornment } from "@mui/material";
import useSWR from "swr";

import { ReactComponent as PerformanceIcon } from "public/images/icons/performance.svg";
import { ReactComponent as FairnessIcon } from "public/images/icons/fairness.svg";
import { ReactComponent as SecurityIcon } from "public/images/icons/security.svg";
import { ReactComponent as RemoveIcon } from "public/images/icons/remove.svg";
import { ReactComponent as PlusIcon } from "public/images/icons/plus.svg";
import reportImg from "public/images/report.png";
import { get, post, schema } from "@/helpers/api";
import { PageTop } from "@/components/PageTop/PageTop";
import { PageContainer } from "@/components/PageContainer/PageContainer";
import { Button } from "@/components/Button/Button";
import { TextInput, TextField } from "@/components/Input/TextInput";
import {
  getCommonProps,
  getSession,
  getTermsVersion,
  getCookies,
  pageErrorHandler,
} from "@/helpers/server-side";
import { reportFormClientSchema } from "@/types/reportFormSchema";
import { useGlobalProgress } from "@/components/GlobalProgress/GlobalProgress";
import { ShareMeta } from "@/components/ShareMeta/ShareMeta";
import { shouldAcceptTerms } from "@/helpers/user";
import { logClientError } from "@/helpers/client-error-logging";
import { debounce } from "@/helpers/input";

enum DOMAINS {
  performance = "performance",
  fairness = "ethics",
  security = "security",
}

type ReportForm = {
  title: string;
  url: string;
  description: string;
  references?: string;
  domain?: DOMAINS;
  images?: File[];
};

const radioOptions = [
  {
    value: DOMAINS.performance,
    title: "Operational and Performance",
    description:
      "Poor robustness to input variations, corner cases, drift, etc.",
    Icon: PerformanceIcon,
  },
  {
    value: DOMAINS.fairness,
    title: "Bias and Fairness",
    description:
      "Ethical issues like bias, toxicity, misinformation, inclusivity, etc.",
    Icon: FairnessIcon,
  },
  {
    value: DOMAINS.security,
    title: "Security and Privacy",
    description:
      "Evasion, backdoors, model inversion, attribute inference, poisoning, privacy, etc.",
    Icon: SecurityIcon,
  },
];

const failedSubmissionMessage =
  "It wasn't possible to submit this report at the moment.";

const modelURLHelperText =
  "Type the URL to a model or specify a repository and model in the 'repo/model-name' format.";

const validatePurl = async (value: string) => {
  try {
    const [data] = await get<{ purl: string }>("/client-api/validate_query", {
      q: value,
    });
    return data.purl === value;
  } catch (error: any) {
    if (error.response?.status === 404)
      throw new Error("Invalid or non-existent model URL");
    throw new Error(failedSubmissionMessage);
  }
};

const validateReference = (value: string): boolean | string => {
  const { success, error } = z
    .union([z.literal(""), z.string().url().optional()])
    .safeParse(value) as SafeParseError<string>;

  return success || error.issues.map(issue => issue.message).join(", ");
};

const resultsSchema = z.object({ purl: z.string() }).array();

export const getServerSideProps = pageErrorHandler(
  async (ctx: GetServerSidePropsContext) => {
    const session = await getSession(ctx.req, ctx.res);
    const termsVersion = getTermsVersion(getCookies(ctx));

    if (session && shouldAcceptTerms(termsVersion)) {
      return {
        redirect: {
          permanent: false,
          destination: `/auth/terms-signature?redirectURL=${ctx.resolvedUrl}`,
        },
      };
    }

    return {
      props: { ...(await getCommonProps(ctx)) },
    };
  }
);

export default function ReportVulnerabilityPage({
  modelURL,
}: {
  modelURL: string;
}) {
  const router = useRouter();
  const { data: session, status } = useSession();
  const isNotLoggedIn = status === "unauthenticated";

  const [error, setError] = useState<null | string>(null);
  const methods = useForm({
    defaultValues: {
      title: "",
      url: modelURL,
      description: "",
      references: "",
      domain: undefined,
      images: undefined,
    },
    mode: "onChange",
  });
  const {
    control,
    handleSubmit,
    register,
    formState: { isSubmitting, errors },
    watch,
    setValue,
    getValues,
    setError: setFieldError,
  } = methods;
  const domain = watch("domain");

  const [references, setReferences] = useState<string[]>([]);
  const { setEnableGlobalProgress } = useGlobalProgress();

  const [search, setSearch] = useState("");

  const { data: results, isLoading } = useSWR(
    `/client-api/purl-search?q=${search}`,
    async url => {
      const [data] = await schema(resultsSchema).get(url);
      return data.map(({ purl }) => ({ label: purl }));
    },
    { fallbackData: [] }
  );

  const handleInput = useMemo(
    () =>
      debounce(
        (e: ChangeEvent<HTMLInputElement>) => setSearch(e.target.value.trim()),
        300
      ),
    []
  );

  if (isNotLoggedIn) {
    return (
      <PageLayout pageTitle="Report a model issue">
        <Box className="box lg:w-2/3 w-full flex flex-col justify-center items-center">
          <Image src={reportImg} alt="Report image" width={150} height={150} />
          <span className="text-2xl font-haffer text-dark text-center">
            Please sign in to your account to <br />
            report a vulnerability
          </span>
          <button
            onClick={() => signIn()}
            className="blue-button mt-8"
            type="submit"
          >
            Sign In
          </button>
        </Box>
      </PageLayout>
    );
  }

  const handleReferenceEnter: KeyboardEventHandler<HTMLInputElement> = e => {
    if (e.key === "Enter") {
      e.preventDefault();
      //@ts-ignore
      const input = e.target?.value;

      if (!input) return;

      const result = validateReference(input);

      if (result === true) {
        setReferences(state => [...state, input]);
        setValue("references", "");
      }
    }
  };

  const removeReference = (value: string) => () => {
    setReferences(state => state.filter(v => v !== value));
  };

  const onSubmit: SubmitHandler<ReportForm> = async data => {
    setError(null);
    setEnableGlobalProgress(true);

    try {
      await validatePurl(data.url);
    } catch (error: any) {
      setFieldError("url", {
        type: "custom",
        message: modelURLHelperText,
      });
      setEnableGlobalProgress(false);
      return;
    }

    try {
      const report = reportFormClientSchema.parse({
        ...data,
        reference_uris: references,
      });
      const [resData] = await post<{ report_id: string }>(
        "/client-api/report/submit",
        report
      );

      return router.push(`/report/${resData.report_id}`);
    } catch (error: any) {
      setError(failedSubmissionMessage);
      logClientError(error);
    }

    setEnableGlobalProgress(false);
  };

  const radioButtons = radioOptions.map(
    ({ value, title, description, Icon }) => (
      <label
        className={classNames(
          "border border-dark hover:border-dark group p-4 rounded flex items-start cursor-pointer",
          { ["border-black-haze"]: domain !== value },
          { "border-error": errors.domain?.message }
        )}
        htmlFor={value}
        key={value}
      >
        <input
          {...register("domain", {
            required: "A risk category must be specified",
          })}
          type="radio"
          value={value}
          id={value}
          className="mt-1"
        />
        <div className="flex flex-col ml-3 text-sm">
          <span>{title}</span>
          <span className="text-shuttle-gray opacity-70 mt-1">
            {description}
          </span>
        </div>
        <Icon
          className={classNames("opacity-20 ml-auto group-hover:opacity-70", {
            ["opacity-70"]: domain === value,
          })}
        />
      </label>
    )
  );

  const handleAddReference = () => {
    const input = getValues("references");

    if (input && validateReference(input) === true) {
      setReferences(state => [...state, input]);
      setValue("references", "");
    }
  };

  return (
    <>
      <ShareMeta title="Report a model issue | AI Risk Database" />
      <PageTop>
        <h1 className="h1 pt-16 pb-9">Report a model issue</h1>
        {session && (
          <div className="mb-14">
            <div className="rounded-full bg-wild-sand w-fit py-2 px-3 border-wild-sand-2 border flex items-center">
              <Image
                src={session.user.image || ""}
                width={32}
                height={32}
                alt="avatar"
                className="rounded-full h-8 w-8"
              />
              <span className="ml-2 text-base font-roboto font-bold text-xs">
                @{session.user.name}
              </span>
            </div>
          </div>
        )}
      </PageTop>
      <PageContainer>
        <Box className="box lg:w-2/3 w-full">
          <FormProvider {...methods}>
            <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col">
              <span className="box-title text-xl">Report Info</span>
              <div className="flex flex-col gap-5">
                <TextInput
                  name="title"
                  label="Vulnerability Report Title"
                  control={control}
                  rules={{ required: "The title is required" }}
                />
                <Autocomplete
                  options={results}
                  loading={isLoading}
                  onChange={(_, value) =>
                    setValue("url", value?.label || "", {
                      shouldValidate: true,
                    })
                  }
                  renderInput={params => (
                    <TextField
                      {...params}
                      label="Model PURL or URL"
                      {...register("url", { required: modelURLHelperText })}
                      error={!!errors.url}
                      helperText={errors.url?.message || modelURL}
                      onChange={handleInput}
                    />
                  )}
                />
                <TextInput
                  name="description"
                  label="Description"
                  control={control}
                  muiProps={{ multiline: true, rows: 4 }}
                  rules={{ required: "A description must be provided" }}
                />
              </div>
              <div className="flex flex-col mt-10">
                <span className="box-title text-xl pb-2">
                  References (optional)
                </span>
                <span className="box-description">
                  Optionally add one or more URL references (e.g., Twitter,
                  Reddit) for evidence of the vulnerability.
                </span>
                <div className="flex flex-row">
                  <TextInput
                    muiProps={{
                      onKeyPress: handleReferenceEnter,
                      className: "w-full",
                      InputProps: {
                        endAdornment: (
                          <InputAdornment position="end">
                            <Button
                              className="p-1 ml-3 [&:hover_svg]:stroke-white"
                              onClick={handleAddReference}
                            >
                              <PlusIcon className="stroke-dark" />
                            </Button>
                          </InputAdornment>
                        ),
                      },
                    }}
                    name="references"
                    label="External Reference (Press <enter> to add to list)"
                    control={control}
                    rules={{ minLength: 1, validate: validateReference }}
                  />
                </div>
                <ul className="mt-3 ml-3 list-disc text-sm">
                  {references.map((value, i) => (
                    <li key={i} className="flex items-center">
                      <span>{value}</span>
                      <Button
                        variant="white"
                        className="px-2 py-2"
                        onClick={removeReference(value)}
                      >
                        <RemoveIcon />
                      </Button>{" "}
                    </li>
                  ))}
                </ul>
                {/*<FileInput name="images" label="images" />*/}
              </div>
              <div className="flex flex-col mt-10">
                <span className="box-title text-xl pb-2">Risk Category</span>
                <span className="box-description">
                  Specify what risk category this vulnerability belongs to.
                </span>
                <div className="mb-2 text-sm text-error text-[0.75rem]">
                  {errors.domain?.message}
                </div>
                <div className="flex flex-col gap-3">{radioButtons}</div>
              </div>
              {error && (
                <Alert className="mt-6" severity="error">
                  {error}
                </Alert>
              )}
              <Button
                variant="blue"
                disabled={isSubmitting}
                className="mt-8"
                type="submit"
              >
                {isSubmitting ? "Submitting report..." : "Submit report"}
              </Button>
            </form>
          </FormProvider>
        </Box>
      </PageContainer>
    </>
  );
}
